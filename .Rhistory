pacman::p_load(memoise,plyr,pryr,microbenchmark)
?microbenchmark
system.time({ g <- delay_by(1, f); g(); Sys.sleep(2); g() }, times = 1)
system.time({ g <- delay_by(1, f); g(); Sys.sleep(2); g() })
system.time({ g <- delay_by(1, f); g(); g() })
wait_until <- function(wait_time, f) {
delay <- as.numeric(wait_time) - as.numeric(Sys.time())
force(f)
function(...) {
if (delay > 0) {
cat('Wait until', delay, 'seconds.\n')
Sys.sleep(delay)
}
f(...)
}
}
time <- as.POSIXct("11:57:00", format = "%H:%M:%S")
h <- wait_until(time, Sys.time)
h()
time <- as.POSIXct("12:45:00", format = "%H:%M:%S")
h <- wait_until(time, Sys.time)
h()
wait_until <- function(wait_time, f) {
delay <- as.numeric(wait_time) - as.numeric(Sys.time())
force(f)
function(...) {
if (delay > 0) {
cat('Wait', delay, 'seconds more before the function executes.\n')
Sys.sleep(delay)
}
f(...)
}
}
time <- as.POSIXct("12:45:00", format = "%H:%M:%S")
h <- wait_until(time, Sys.time)
h()
wait_until <- function(wait_time, f) {
delay <- as.numeric(wait_time) - as.numeric(Sys.time())
force(f)
function(...) {
if (delay > 0) {
cat('Wait', delay, 'seconds more before the function executes.\n')
Sys.sleep(delay)
print("Hurray!!! The function executed")
}
f(...)
}
}
time <- as.POSIXct("12:44:00", format = "%H:%M:%S")
h <- wait_until(time, Sys.time)
h()
microbenchmark(list = list(
dot_every(10, memoise(delay_by(1, rnorm)))(100),
memoise(dot_every(10, delay_by(1, rnorm)))(100),
dot_every(10, delay_by(1, memoise(rnorm)))(100)
))
dot_every <- function(n, f) {
i <- 1
function(...) {
if (i %% n == 0) cat(".")
i <<- i + 1
f(...)
}
}
dot_every(10, memoise(delay_by(1, runif(20))))
dot_every(10, memoise(delay_by(1, runif)))(100)
dot_every(10, delay_by(1, memoise(rnorm)))(100)
dot_every <- function(n, f) {
i <- 1
function(...) {
if (i %% n == 0) cat(".")
i <<- i + 1
f(...)
}
}
delay_by <- function(delay, f) {
function(...) {
Sys.sleep(delay)
f(...)
}
}
dot_every(10, delay_by(1, memoise(rnorm)))(100)
dot_every(10, memoise(delay_by(1, runif)))(100)
dot_every(10, delay_by(1, memoise(rnorm)))(100)
?remmeber
?remember
?remember()
?remember
??remember
remember <- function() {
memory <- list()
f <- function(...) {
# This is inefficient!
memory <<- append(memory, list(...))
invisible()
}
structure(f, class = "remember")
}
as.list.remember <- function(x, ...) {
environment(x)$memory
}
print.remember <- function(x, ...) {
cat("Remembering...\n")
str(as.list(x))
}
f <- function(...) {
# This is inefficient!
number_remembers <<- number_remembers + 1
memory[[number_remembers]] <<- list(...)
invisible()
}
ll <- as.list(seq(1000))
number_remembers <- 1000
microbenchmark::microbenchmark(
{ ll <<- append(ll, 2) },                                                     # 9.8mcs
{ number_remembers <<- number_remembers + 1; ll[[number_remembers]] <- 2 }    # 1.6mcs
)
f <- function(a, b) function(x) a * x + b
fs <- Map(f, a = c(0, 1), b = c(0, 1))
fs[[1]](3)
f <- function(a, b) {
force(a)
force(b)
function(x) a * x + b
}
# create a list of functions with different parameters.
fs <- Map(f, a = c(0, 1), b = c(0, 1))
fs[[1]](3)
f <- function(a, b) {
force(a)
force(b)
function(x) {
a * x + b
}
}
# create a list of functions with different parameters.
fs <- Map(f, a = c(0, 1), b = c(0, 1))
fs[[1]](3)
f <- function(a, b) {
force(a)
force(b)
function(x) {
a * x + b
}
}
fs <- Map(f, a = c(0, 1), b = c(0, 1))
fs[[1]](3)
f <- function(a, b) {
force(a);
force(b);
function(x) {
a * x + b
}
}
fs <- Map(f, a = c(0, 1), b = c(0, 1))
fs[[1]](3)
f <- function(a, b) {
force(a);
force(b);
function(x) {
a * x + b
}
}
# create a list of functions with different parameters.
fs <- Map(f, a = c(0, 1), b = c(0, 1))
fs[[1]](3)
f <- function(a, b) { force(a); force(b); function(x) a * x + b }
fs <- Map(f, a = c(0, 1), b = c(0, 1))
fs[[1]](3)
f <- function(a, b) function(x) a * x + b
### create a list of functions with different parameters.
fs <- Map(f, a = c(0, 1), b = c(0, 1))
fs[[1]](3)
f <- function(a, b) function(x) a * x + b
### create a list of functions with different parameters.
fs <- Map(f, a = c(0, 1), b = c(0, 1))
fs[[1]](3)
f <- function(a, b) { force(a); force(b); function(x) a * x + b }
fs <- Map(f, a = c(0, 1), b = c(0, 1))
fs[[1]](3)
fs[[1]](3)
f <- function(a, b) function(x) a * x + b
fs <- Map(f, a = c(0, 1), b = c(0, 1))
fs[[1]](3)
negative(sum)(1:5)
negative <- function(f) {
force(f)
function(...) {
-f(...)
}
}
negative <- function(f) {
force(f)
function(...) {
-f(...)
}
}
negative(sum)(1:5)
print negative(sum)(1:5)
print(negative(sum)(1:5))
print(sum(1:5),negative(sum)(1:5))
print(sum(1:5), negative(sum)(1:5))
print(negative(sum)(1:5))
negative(sum)(1:5)
?evaluate
library(evaluate)
?evaluate
capture_it <- function(f) {
force(f)
function(...) {
evaluate(f(...), keep_warning = TRUE, keep_message = TRUE)
}
}
capture_it(log)(-1)
capture_it(1/0)
capture_it(log)(-1)
folder_changes <- function(folder) {
files <- dir(folder)
function(...) {
new_files <- setdiff(dir(folder), files)
deleted_files <- setdiff(files, dir(folder))
cat('created = ', created, 'deleted = ', deleted, '\n' )
}
}
?colwise()
source(colwise())
source(colwise
)
UseMethod("colwise")
showMethods(‘colwise’)
getMethod(‘colwise’)
getMethod(colwise)
colwise()
colwise()
strip_splits(mtcars)
a<-strip_splits(mtcars)
str(a)
str(mtcars)
dlply(mtcars, c("vs", "am"))
dlply(mtcars, c("vs", "am"), strip_splits)
filter(mtcars)
filter(mtcars)
filter(a)
filter(a)
Filter(a)
plyr::colwise()
as.data.frame.function <- function(f){
function(...){
as.data.frame(f(...))
}
}
as.data.frame(matrix)(1:9)
class(as.data.frame(matrix)(1:9))
class(class(as.matrix.function(data.frame)(1:9)))
as.matrix.function <- function(f) {
function(...) {
as.matrix(f(...))
}
}
class(class(as.matrix.function(data.frame)(1:9)))
class(class(as.matrix.function(data.frame)(1:9)))
class(class(as.matrix.function(data.frame)(1:9, ncol=3)))
class(class(as.matrix.function(mtcars)))
class(class(as.matrix.function))(one = 1:9, two = rnorm(9))
class(class(as.matrix.function))(one = 1:9, two = rnorm(9))
as.matrix.function <- function(f) {
function(...) {
as.matrix(f(...))
}
}
class(class(as.matrix.function)(one = 1:9, two = rnorm(9))
)
class(class(as.matrix.function)(one = 1:9, two = rnorm(9)))
class(as.matrix.function(data.frame)(one = 1:9, two = rnorm(9)))
class(as.matrix.function(data.frame)(A = 1:9, B = 1:9))
ignore <- function(...) NULL
tee <- function(f, on_input = ignore, on_output = ignore) {
function(...) {
on_input(...)
output <- f(...)
on_output(output)
output
}
}
g <- function(x) cos(x) - x
zero <- uniroot(g, c(-5, 5))
show_x <- function(x, ...) cat(sprintf("%+.08f", x), "\n")
library(pryr)
partial(uniroot, interval = c(-5, 5))(g)
format_it <- partial(sprintf, "%+.08f")
newline <- partial(cat, "\n")
show_x2 <- function(x) newline(format_it(x))
zero <- uniroot(tee(g, on_output = show_x2), c(-5, 5))
lapply(funs2, 1:5)
lapply(1:5, funs2)
funs2 <- list(
sum = partial(sum, na.rm = TRUE),
mean = partial(mean, na.rm = TRUE),
median = partial(median, na.rm = TRUE)
)
lapply(1:5, funs2)
lapply(funs2, 1:5)
lapply(funs2, x=1:5)
lapply(funs2(x), x=1:5)
lapply(funs2, time_it(call_fun), x=1:5)
my_compose <- function(...)
{
"%o%" <- compose
fs <- lapply(list(...), match.fun)
Reduce("%o%", fs)
}
square <- function(x) x^2
over_5 <- function(x) x/5
times_2 <- function(x) 2*x
my_fun <- my_compose(times_2, square, over_5)
my_fun(10)
#not sure how to approach this one for now
compose2 <- function(...) { Reduce(`%o`, list(...)) }
compose2 <- partial(Reduce, f = `%o%`)
compose2(c(mean,sum,median))(1:10)
compose2
compose2(c(mean,sum,median))(1:10)
compose2(c(mean))(1:10)
compose2(c(mean, median))(1:10)
compose2(c(mean))(1:10)
compose2(c(mean,exp))(1:10)
"%o%" <- compose
compose2 <- partial(Reduce, f = `%o%`)
compose2(c(mean,exp,sqrt))(1:10)
compose2(c(mean,sqrt))(4,4,4,4)
compose2(c(sqrt,mean))(4,4,4,4)
sqrt(mean(4,4,4,4))
(mean %o% sqrt)(4,4,4,4)
(sqrt %o% mean)(4,4,4,4)
`%xor%` <- function(x, y) {
xor(x, y)
}
TRUE %xor% FALSE
TRUE %xor% TRUE
TRUE %xor% FALSE
FALSE %xor% TRUE
FALSE %xor% FALSE
and <- function(f1, f2) {
force(f1); force(f2)
function(...) {
f1(...) && f2(...)
}
}
or <- function(f1, f2) {
force(f1); force(f2)
function(...) {
f1(...) || f2(...)
}
}
`%xor2%` <- function(f1, f2) {
force(f1); force(f2)
function(...) {
or(f1, f2)(...) & !and(f1, f2)(...)
}
}
#the xor function evaluated to true whenever x or y are dissimilar.
TRUE %xor2% TRUE
TRUE %xor2% FALSE
FALSE %xor2% TRUE
FALSE %xor2% FALSE
and <- function(f1, f2) {
force(f1); force(f2)
function(...) {
f1(...) && f2(...)
}
}
or <- function(f1, f2) {
force(f1); force(f2)
function(...) {
f1(...) || f2(...)
}
}
`%xor2%` <- function(f1, f2) {
force(f1); force(f2)
function(...) {
or(f1, f2)(...) & !and(f1, f2)(...)
}
}
TRUE %xor2% TRUE
`%xor2%` <- function(f1, f2) {
force(f1); force(f2)
function(...) {
or(f1, f2)(...) & !and(f1, f2)(...)
}
}
TRUE %xor2% TRUE
`%xor%` <- function(x, y) {
xor(x, y)
}
TRUE %xor% TRUE
and <- function(f1, f2) {
force(f1); force(f2)
function(...) {
f1(...) && f2(...)
}
}
or <- function(f1, f2) {
force(f1); force(f2)
function(...) {
f1(...) || f2(...)
}
}
`%xor2%` <- function(f1, f2) {
function(...) {
or(f1, f2)(...) & !and(f1, f2)(...)
}
}
TRUE %xor2% TRUE
and <- function(f1, f2) {
function(...) {
f1(...) && f2(...)
}
}
or <- function(f1, f2) {
function(...) {
f1(...) || f2(...)
}
}
`%xor2%` <- function(f1, f2) {
function(...) {
or(f1, f2)(...) & !and(f1, f2)(...)
}
}
TRUE %xor2% TRUE
xor2 <- function(f1, f2) {
function(...) {
or(f1, f2)(...) & !and(f1, f2)(...)
}
}
xor2(TRUE,TRUE)
xor2 <- function(f1, f2) {
or(f1, f2)(...) & !and(f1, f2)(...)
}
xor2(TRUE,TRUE)
and <- function(f1, f2) {
force(f1); force(f2)
function(...) {
f1(...) && f2(...)
}
}
or <- function(f1, f2) {
force(f1); force(f2)
function(...) {
f1(...) || f2(...)
}
}
bxor2 <- function(f1, f2) {
force(f1); force(f2)
function(...) {
or(f1, f2)(...) & !and(f1, f2)(...)
}
}
bxor2(TRUE,TRUE)
bxor2(function(x) x > 2, function(x) x < 3)(1)  # TRUE (when one is FALSE and one is TRUE)
bxor2 <- function(f1, f2) {
or(f1, f2)(...) & !and(f1, f2)(...)
}
bxor2(function(x) x > 2, function(x) x < 3)(1)  # TRUE (when one is FALSE and one is TRUE)
bxor2(TRUE,TRUE)
bxor2 <- function(f1, f2) {
or(f1, f2) & !and(f1, f2)
}
bxor2(TRUE,TRUE)
and <- function(f1, f2) {
f1 && f2
}
or <- function(f1, f2) {
f1 || f2
}
bxor2 <- function(f1, f2) {
or(f1, f2) & !and(f1, f2)
}
bxor2(TRUE,TRUE)
`%xor2%`  <- function(f1, f2) {
or(f1, f2) & !and(f1, f2)
}
#the xor function evaluated to true whenever x or y are dissimilar.
TRUE %xor2% TRUE
TRUE %xor2% FALSE
FALSE %xor2% TRUE
FALSE %xor2% FALSE
plus(mean, mean)(4,4,4,4)
plus <- function(f1, f2) {
f1(...) + f2(...)
}
plus(mean, mean)(4,4,4,4)
plus <- function(f1, f2) {
force(f1); force(f2)
function(...) {
f1(...) + f2(...)
}
}
plus(mean, mean)(4,4,4,4)
minus <- function(f1, f2) {
force(f1); force(f2)
function(...) {
f1(...) - f2(...)
}
}
minus(mean, mean)(4,4,4,4)
multiply <- function(f1, f2) {
force(f1); force(f2)
function(...) {
f1(...) * f2(...)
}
}
multiply(mean, mean)(4,4,4,4)
