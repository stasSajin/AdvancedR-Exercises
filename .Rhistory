} else {
# Recursive case
where(name, parent.env(env))
}
}
where2(plot)
where2 <- function(name, env = globalenv()) {
#need to parse the name of a function into character
if (!is.character(name)) { name <- deparse(substitute(name)) }
if (identical(env, emptyenv())) {
# Base case
stop("Can't find ", name, call. = FALSE)
} else if (exists(name, envir = env, inherits = FALSE)) {
# Success case
environmentName(env)
} else {
# Recursive case
where2(name, parent.env(env))
}
}
where2(plot)
where <- function(name, env = globalenv()) {
#need to parse the name of a function into character
name <- deparse(substitute(name))
if (identical(env, emptyenv())) {
# Base case
stop("Can't find ", name, call. = FALSE)
} else if (exists(name, envir = env, inherits = FALSE)) {
# Success case
environmentName(env)
} else {
# Recursive case
where(name, parent.env(env))
}
}
where(plot)
whereModified <- function(name, env = globalenv()) {
#need to parse the name of a function into character
name <- deparse(substitute(name))
if (identical(env, emptyenv())) {
# Base case
stop("Can't find ", name, call. = FALSE)
} else if (exists(name, envir = env, inherits = FALSE)) {
# Success case
environmentName(env)
} else {
# Recursive case
whereModified(name, parent.env(env))
}
}
whereModified <- function(name, env = globalenv()) {
#need to parse the name of a function into character
name <- deparse(substitute(name))
if (identical(env, emptyenv())) {
# Base case
stop("Can't find ", name, call. = FALSE)
} else if (exists(name, envir = env, inherits = FALSE)) {
# Success case
environmentName(env)
} else {
# Recursive case
whereModified(name, parent.env(env))
}
}
whereModified(plot)
whereModified <- function(name, env = globalenv()) {
#need to parse the name of a function into character
if (!is.character(name)) { name <- deparse(substitute(name)) }
if (identical(env, emptyenv())) {
# Base case
stop("Can't find ", name, call. = FALSE)
} else if (exists(name, envir = env, inherits = FALSE)) {
# Success case
environmentName(env)
} else {
# Recursive case
whereModified(name, parent.env(env))
}
}
whereModified(plot)
whereModified(start)
?get()
getModified <- function(name, env = parent.frame()) {
if (!is.character(name)) {
if (identical(env, emptyenv())) {
# base case
warning(paste(name," not found"))
NULL
} else if (is.element(name,ls(env))) {
# success case
env[[name]]
} else {
# recursive case
getModified(name, env = parent.env(env))
}
}
}
getModified(plot)
getModified <- function(name, env = parent.frame()) {
if (!is.character(name) & length(name)>0) {
if (identical(env, emptyenv())) {
# base case
warning(paste(name," not found"))
NULL
} else if (is.element(name,ls(env))) {
# success case
env[[name]]
} else {
# recursive case
getModified(name, env = parent.env(env))
}
}
}
getModified(plot)
getModified <- function(name, env = parent.frame()) {
if (!is.character(name) & length(name)==1) {
if (identical(env, emptyenv())) {
# base case
warning(paste(name," not found"))
NULL
} else if (is.element(name,ls(env))) {
# success case
env[[name]]
} else {
# recursive case
getModified(name, env = parent.env(env))
}
}
}
getModified(plot)
getModified <- function(name, env = parent.frame()) {
if (!is.character(name) & length(name)==1) {
if (identical(env, emptyenv())) {
# base case
warning(paste(name," not found"))
NULL
} else if (is.element(name,ls(env))) {
# success case
env[[name]]
} else {
# recursive case
getModified(name, env = parent.env(env))
}
}
}
getModified(plot)
getModified <- function(name, env = parent.frame()) {
if (!is.character(name) & length(name)==1) {
if (identical(env, emptyenv())) {
# base case
warning(paste(name," not found"))
NULL
} else if (is.element(name,ls(env))) {
# success case
env[[name]]
} else {
# recursive case
getModified(name, env = parent.env(env))
}
}
}
getModified(plot)
recursiveGet <- function(name, env = parent.frame()) {
stopifnot(is.character(name), length(name) == 1)
if (identical(env, emptyenv())) {
# base case
warning(paste(name," not found"))
NULL
} else if (is.element(name,ls(env))) {
# success case
env[[name]]
} else {
# recursive case
recursiveGet(name, env = parent.env(env))
}
}
recursiveGet(plot)
getModified <- function(name, env = parent.frame()) {
if (!is.character(name) & length(name)==1) {
if (identical(env, emptyenv())) {
# base case
warning(paste(name," not found"))
NULL
} else if (is.element(name,ls(env))) {
# success case
env[[name]]
} else {
# recursive case
getModified(name, env = parent.env(env))
}
}
}
getModified(plot)
getModified <- function(name, env = parent.frame()) {
stopifnot(is.character(name), length(name) == 1) {
if (identical(env, emptyenv())) {
# base case
warning(paste(name," not found"))
NULL
} else if (is.element(name,ls(env))) {
# success case
env[[name]]
} else {
# recursive case
getModified(name, env = parent.env(env))
}
}
}
getModified(plot)
getModified <- function(name, env = parent.frame()) {
stopifnot(is.character(name), length(name) == 1)
if (identical(env, emptyenv())) {
# base case
warning(paste(name," not found"))
NULL
} else if (is.element(name,ls(env))) {
# success case
env[[name]]
} else {
# recursive case
getModified(name, env = parent.env(env))
}
}
getModified(plot)
is.character(plot)
is.character(plot)==TRUE
is.character(plot)=TRUE
getModified <- function(name, env = parent.frame()) {
if (!is.character(name)) { name <- deparse(substitute(name)) }
if (identical(env, emptyenv())) {
# base case
warning(paste(name," not found"))
NULL
} else if (is.element(name,ls(env))) {
# success case
env[[name]]
} else {
# recursive case
getModified(name, env = parent.env(env))
}
}
getModified(plot)
fget(name, env, inherits = TRUE) {
if (!is.character(name)) { name <- deparse(substitute(name)) }
test <- function(env,name) is.element(name,ls(env)) && is.function(env[[`name`]])
if (test(env,name)) return(env[[`name`]])
if (isTRUE(inherits)) {
while (!identical(env,emptyenv())) {
env <- parent.env(env)
if (test(env,name)) return(env[[`name`]])
}
}
warning(paste(name," not found"))
NULL
}
fget<- function(name, env, inherits = TRUE) {
if (!is.character(name)) { name <- deparse(substitute(name)) }
test <- function(env,name) is.element(name,ls(env)) && is.function(env[[`name`]])
if (test(env,name)) return(env[[`name`]])
if (isTRUE(inherits)) {
while (!identical(env,emptyenv())) {
env <- parent.env(env)
if (test(env,name)) return(env[[`name`]])
}
}
warning(paste(name," not found"))
NULL
}
fget('mean',globalenv())
fget('start',globalenv())
existsModified<- function(name, env = parent.frame(), inherits = FALSE) {
if (!is.character(name)) { name <- deparse(substitute(name)) }
if (!inherits) return(name %in% ls(env))
if (identical(env, emptyenv())) {
# base case
FALSE
} else if (name %in% ls(env)) {
# success case
TRUE
} else {
# recursive case
existsModified(name, env = parent.env(env), inherits = TRUE)
}
}
myExists('start')
existsModified('start')
existsModified('get')
existsModified('fget')
strModified<- function(name) {
list(
name = deparse(substitute(name))
callEnviron = parent.frame()
enclosEnviron = parent.env(environment())
)
}
strModified<- function(name) {
list(
name = deparse(substitute(name)),
callEnviron = parent.frame(),
enclosEnviron = parent.env(environment())
)
}
myStr(var)
strModified(var)
strModified(plot)
strModified(plot)
strModified<- function(name) {
list(
name = deparse(substitute(name)),
callEnviron = parent.frame(name),
enclosEnviron = parent.env(environment(name))
)
}
strModified(plot)
strModified<- function(name) {
name = deparse(substitute(name))
list(
functionname = name,
callEnviron = parent.frame(),
enclosEnviron = parent.env(environment())
)
}
strModified(var)
strModified<- function(name) {
name = deparse(substitute(name))
list(
functionname = name,
callEnviron = parent.frame(name),
enclosEnviron = parent.env(environment())
)
}
strModified(var)
strModified<- function(name) {
name <- deparse(substitute(name))
list(
functionname = name,
callEnviron = parent.frame(name),
enclosEnviron = parent.env(environment())
)
}
strModified(var)
parent.frame(var)
?parent.frame
strModified<- function(name) {
name <- deparse(substitute(name))
list(
functionname = name,
callEnviron = get("name", parent.frame()),
enclosEnviron = get("name", environment())
)
}
strModified(var)
strModified<- function(name) {
name <- deparse(substitute(name))
list(
functionname = name,
callEnviron = get(name, parent.frame()),
enclosEnviron = get(name, environment())
)
}
strModified(var)
strModified(mean)
strModified<- function(name) {
name <- deparse(substitute(name))
list(
functionname = name,
callEnviron = get(name, parent.frame()),
enclosEnviron = get(name, parent.env(environment()))
)
}
strModified(mean)
strModified(mean)
strModified<- function(name) {
name <- deparse(substitute(name))
list(
functionname = name,
callEnviron = parent.frame(),
enclosEnviron = get(name, parent.env(environment()))
)
}
strModified(mean)
?Reserved
rebind <- function(name, value, env = parent.frame()) {
if (identical(env, emptyenv())) {
stop("Can't find ", name, call. = FALSE)
} else if (exists(name, envir = env, inherits = FALSE)) {
assign(name, value, envir = env)
} else {
rebind(name, value, parent.env(env))
}
}
rebind("a", 10)
assignModified<- function(name, value, env = parent.frame()) {
if (exists(name, envir = env, inherits = FALSE)) {
stop("Name already exists ", name, call. = FALSE)
} else {
assign(name, value, env)
}
}
assignModified("a", 2)
a
assignModified("a", 3)
assignModified<- function(name, value, env = parent.frame()) {
if (exists(name, envir = env, inherits = FALSE)) {
stop("Name already exists ", call. = FALSE)
} else {
assign(name, value, env)
}
}
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
message2error <- function(code) {
withCallingHandlers(code, message = function(e) stop(e))
}
message2error
message2error <- function(code) {
tryCatch(code, message = function(e) stop(e))
}
message2error
message2error()
message2error(a)
rm(a)
message2error(a)
message2error <- function(code) {
withCallingHandlers(code, message = function(e) stop(e))
}
message2error(someCode)
message2error(someCode)
traceback()
message2error <- function(code) {
tryCatch(code, message = function(e) stop(e))
}
message2error(someCode)
try({
a <- 1
b <- "x"
a + b
})
col_means <- function(df) {
numeric <- sapply(df, is.numeric)
numeric_cols <- df[, numeric]
data.frame(lapply(numeric_cols, mean))
}
col_means(mtcars)
col_means(mtcars[, 0])
col_means(mtcars[0, ])
col_means(mtcars[, "mpg", drop = F])
col_means(1:10)
col_means(as.matrix(mtcars))
col_means(as.list(mtcars))
col_means(mtcars)
col_means(mtcars[, 0])
col_means(mtcars[0, ])
col_means(mtcars[, "mpg", drop = F])
col_means(1:10)
col_means(as.matrix(mtcars))
col_means(as.list(mtcars))
mtcars2 <- mtcars
mtcars2[-1] <- lapply(mtcars2[-1], as.character)
col_means(mtcars2)
col_means(mtcars[0, ])
col_means(mtcars[, 0])
col_means(mtcars[0, ])
col_means(mtcars[, 0])
col_means(mtcars[, 0])
col_means(mtcars[, 0])
col_means(mtcars[, "mpg", drop = F])
col_means(1:10)
col_means(1:10)
col_means(as.matrix(mtcars))
col_means(mtcars2)
col_means2 <- function(df) {
if (!is.data.frame(df)) stop("Input must be a data frame")
if (0 %in% dim(df)) {
warning("Dataframe is empty, no means to calculate.")
return(NULL)
}
numeric <- sapply(df, is.numeric)
if (FALSE %in% numeric) warning("Dropped ", sum(!numeric), " non-numeric columns.")
numeric_cols <- df[, numeric, drop = FALSE]
data.frame(lapply(numeric_cols, mean))
}
lag <- function(x, n = 1L) {
if (!is.numeric(n) | length(n) != 1)
stop('n must be a numeric vector with at least length 1.')
xlen <- length(x)
if (n > xlen) stop('n must be smaller than the number of elements in x')
if (n == 0)
warning('n is 0, so the lagged vector and the unlagged vector will be identical.')
c(rep(NA, n), x[seq_len(xlen - n)])
}
lag(seq(4), c(1, 2))
lag_(seq(4), 0)
lag(seq(4), 0)
