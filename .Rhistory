library(pryr)
t
t.test
UseMethod("t.test")
?t.test
ftype(t)
ftype(t.test)
myTestObject2 <- structure(1:5, class = "test")
t.test(myTestObject2)
t(myTestObject2)
myTestObject2
Function: Math (package base)
showMethods("Math")
methods('Math')
?methods
help("showMethods")
help("showMethods", where=baseenv())
help("showMethods", where=base
)
showMethods(class = "Matrix")
showMethods(class = "Math")
showMethods("Math")
Function: Math (package base)
sqrt
methods('Math')
Math
showMethods("Math")
methods(class="Math")
setdiff(methods(class="POSIXlt"), methods(class="POSIXct"))
setdiff(methods(class="POSIXct"), methods(class="POSIXct"))
setdiff(methods(class="POSIXct"), methods(class="POSIXlt"))
setdiff(methods(class="POSIXlt"), methods(class="POSIXct"))
intersect(methods(class="POSIXct"), methods(class="POSIXlt"))
intersect(methods(class="POSIXlt"), methods(class="POSIXct"))
intersect(methods(class="POSIXlt"), methods(class="POSIXct"))
union(methods(class="POSIXlt"), methods(class="POSIXct"))
library(qdap)
XctFunctions<-methods(class="POSIXct")
XctFunctions
XltFunctions<-methods(class="POSIXlt")
XltFunctions
setdiff(XctFunctions, XltFunctions)
XctFunctions<-beg2char(methods(class="POSIXct"),".",1)
XctFunctions
XltFunctions<-beg2char(methods(class="POSIXlt"),".",1)
setdiff(XctFunctions, XltFunctions)
setdiff(XctFunctions, XltFunctions)
setdiff(XltFunctions, XctFunctions)
XltFunctions
XctFunctions
setdiff(XctFunctions, XltFunctions)
setdiff(XltFunctions, XctFunctions)
intersection(XctFunctions, XltFunctions)
intersect(XctFunctions, XltFunctions)
objs <- mget(ls("package:base"), inherits = TRUE)
base.funs <- Filter(is.function, objs)
sapply(base.funs,function(x) is.element("generic",ftype(x)))
num.methods <- sapply(names(base.funs), function(x) is.element("generic",ftype(x)))
num.methods
names(base.funs)
base.funs <- Filter(is.function, objs)
base.funs
library(pryr)
is.generic <- function(x) {
is.element("generic",ftype(x))
}
base.generics <- Filter(is.generic, base.funs)
num.methods <- sapply(names(base.generics),function(x) length(methods(x)))
which.max(num.methods)
library(pryr)
objs <- mget(ls("package:base"), inherits = TRUE)
base.funs <- Filter(is.function, objs)
greatestMethods <- sapply(names(base.funs), function(x) is.element("generic",ftype(x)))
greatestMethods <- sapply(names(base.funs), function(x) is.element("generic",ftype(x)))
baseFunctions <- Filter(is.function, objs)
as.data.frame(NA,5,2)
matrix(vector(), 0, 3)
matrix(vector(), 1, 3)
data.frame(matrix(vector(), length(baseFunctions), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
genericFunctions<-function(baseFunctions) {
#specify an empty dataframe
df <- data.frame(matrix(vector(), length(baseFunctions), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(baseFunctions)) {
if (ftype(i)[2]=="generic")
df[i,1]<-names(i)
df[i,2]<-length(methods(i))
}
return(df)
}
genericFunctions(baseFunctions)
df <- data.frame(matrix(vector(), length(baseFunctions), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(baseFunctions)) {
if (ftype(i)[2]=="generic")
df[i,1]<-names(i)
df[i,2]<-length(methods(i))
}
names(baseFunctions[1])
names(baseFunctions[2])
length(methods("-"))
genericFunctions<-function(baseFunctions) {
#specify an empty dataframe
df <- data.frame(matrix(vector(), length(baseFunctions), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(baseFunctions)) {
if (ftype(i)[2]=="generic")
df[i,1]<-baseFunctions[i]
df[i,2]<-length(methods(baseFunctions[i]))
}
return(df)
}
genericFunctions(baseFunctions)
genericFunctions<-function(baseFunctions) {
#specify an empty dataframe
df <- data.frame(matrix(vector(), length(baseFunctions), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(baseFunctions)) {
if (ftype(i)[2]=="generic") {
df[i,1]<-baseFunctions[i]
df[i,2]<-length(methods(baseFunctions[i]))
}
}
return(df)
}
genericFunctions(baseFunctions)
1:length(baseFunctions
length(methods("-"))
1:length(baseFunctions)
genericFunctions<-function(baseFunctions) {
#specify an empty dataframe
df <- data.frame(matrix(vector(), length(baseFunctions), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(baseFunctions)) {
if (ftype(baseFunctions[i])=="generic") {
df[i,1]<-baseFunctions[i]
df[i,2]<-length(methods(baseFunctions[i]))
}
}
return(df)
}
genericFunctions(baseFunctions)
View(df)
genericFunctions<-function(baseFunctions) {
#specify an empty dataframe
df <- data.frame(matrix(vector(), length(baseFunctions), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(baseFunctions)) {
if (ftype(baseFunctions[i])=="generic") {
df[i,1]<-baseFunctions[i]
df[i,2]<-length(methods(baseFunctions[i]))
}
}
return(complete.cases(df))
}
genericFunctions(baseFunctions)
genericFunctions<-function(baseFunctions) {
#specify an empty dataframe
df <- data.frame(matrix(vector(), length(baseFunctions), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(baseFunctions)) {
if (ftype(baseFunctions[i])=="generic") {
df[i,1]<-baseFunctions[i]
df[i,2]<-length(methods(baseFunctions[i]))
}
}
return(df)
}
sas<-genericFunctions(baseFunctions)
View(sas)
ftype(baseFunctions[1]
)
ftype(baseFunctions[2])
ftype(baseFunctions)[2]
ftype(baseFunctions)[1]
ftype(baseFunctions[1])[1]
baseFunctions[1]
is.element(baseFunctions)
baseFunctions[1][1]
baseFunctions[[1]]
baseFunctions$1
unlist(baseFunctions)
head(baseFunctions)
names(baseFunctions)
genericFunctions<-function(baseFunctions) {
#specify an empty dataframe
df <- data.frame(matrix(vector(), length(baseFunctions), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(baseFunctions)) {
if (ftype(names(baseFunctions)[i])=="generic") {
df[i,1]<-baseFunctions[i]
df[i,2]<-length(methods(baseFunctions[i]))
}
}
return(df)
}
sas<-genericFunctions(baseFunctions)
View(sas)
ftype(names(baseFunctions)[1])
names(baseFunctions)
names(baseFunctions)[1]
ftype(names(baseFunctions)[1])
genericFunctions<-function(baseFunctions) {
#specify an empty dataframe
df <- data.frame(matrix(vector(), length(baseFunctions), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(baseFunctions)) {
if (is.element("generic",ftype(baseFunctions[i]))) {
df[i,1]<-baseFunctions[i]
df[i,2]<-length(methods(baseFunctions[i]))
}
}
return(df)
}
sas<-genericFunctions(baseFunctions)
View(sas)
is.element("generic",ftype(baseFunctions))
is.element("generic",ftype(baseFunctions[1]))
is.element("generic",ftype(baseFunctions[2]))
genericFunctions<-function(baseFunctions) {
#specify an empty dataframe
df <- data.frame(matrix(vector(), length(baseFunctions), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(baseFunctions)) {
if (is.element("generic",ftype(baseFunctions[i]))) {
df[i,1]<-names(baseFunctions)[i]
df[i,2]<-length(methods(baseFunctions[i]))
}
}
return(df)
}
sas<-genericFunctions(baseFunctions)
sas
ftype(baseFunctions[2])
ftype(baseFunctions[1])
is.element("generic",ftype(baseFunctions[1]))
is.element("generic",ftype(baseFunctions[60]))
is.element("generic",ftype(mean))
baseFunctions[1]
functionNames<-names(baseFunctions)
functionNames<-names(baseFunctions)
genericFunctions<-function(x) {
#specify an empty dataframe
df <- data.frame(matrix(vector(), length(x), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(x)) {
if (is.element("generic",ftype(x[i]))) {
df[i,1]<-names(x)[i]
df[i,2]<-length(methods(x[i]))
}
}
return(df)
}
sas<-genericFunctions(functionNames)
View(sas)
functionNames
is.element("generic",ftype(functionNames[688]))
functionNames[688]
str(functionNames[688])
str("mean")
ftype(functionNames[688])
ftype("mean")
ftype(mean)
sas<-genericFunctions(as.factorfunctionNames))
sas<-genericFunctions(as.factor(functionNames))
View(sas)
ftype(as.factor(functionNames[688]))
str(mean)
functionNames[688]
as.factor(functionNames[688])
ftype(as.name(functionNames[688]))
ftype(unquote(functionNames[688]))
ftype(noquote(functionNames[688]))
ftype(noquote(functionNames[688]))
genericFunctions<-function(x) {
#filter based on generic function
is.generic <- function(x) {
is.element("generic",ftype(x))
}
generics<-Filter(is.generic,x)
#create empty df
df <- data.frame(matrix(vector(), length(generics), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(generics)) {
df[i,1]<-names(generics)[i]
df[i,2]<-length(methods(x[i]))
}
return(complete.cases(df))
}
sas<-genericFunctions(baseFunctions)
genericFunctions<-function(x) {
#filter based on generic function
is.generic <- function(x) {
is.element("generic",ftype(x))
}
generics<-Filter(is.generic,x)
#create empty df
df <- data.frame(matrix(vector(), length(generics), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(generics)) {
df[i,1]<-names(generics)[i]
df[i,2]<-length(methods(generics[i]))
}
return(complete.cases(df))
}
sas<-genericFunctions(baseFunctions)
is.generic <- function(x) {
is.element("generic",ftype(x))
}
generics<-Filter(is.generic,x)
generics<-Filter(is.generic,baseFunctions)
genericFunctions<-function(x) {
#create empty df
df <- data.frame(matrix(vector(), length(x), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(x)) {
df[i,1]<-names(x)[i]
df[i,2]<-length(methods(x[i]))
}
return(complete.cases(df))
}
sas<-genericFunctions(generics)
generics
length(x)
length(generics)
names(generics)
genericFunctions<-function(x) {
#create empty df
df <- data.frame(matrix(vector(), length(x), 2,
dimnames=list(c(), c("Function", "MethodLength"))))
for (i in 1:length(x)) {
df[i,1]<-names(x)[i]
df[i,2]<-length(methods(x[i]))
}
return(complete.cases(df))
}
sas<-genericFunctions(generics)
numMethods <- sapply(names(generics),function(x) length(methods(x)))
which.max(numMethods)
y <- 1
g <- function(x) {
y <- 2
UseMethod("g")
}
g.numeric <- function(x) y
g(10)
h <- function(x) {
x <- 10
UseMethod("h")
}
h.character <- function(x) paste("char", x)
h.numeric <- function(x) paste("num", x)
h("a")
y <- 1
g <- function(x) {
y <- 2
UseMethod("g")
}
g.numeric <- function(x) y
g(10)
h <- function(x) {
x <- 10
UseMethod("h")
}
h.character <- function(x) paste("char", x)
h.numeric <- function(x) paste("num", x)
h("a")
h(1)
f <- function() 1
g <- function() 2
class(g) <- "function"
class(f)
class(g)
length.function <- function(x) "function"
length(f)
length(g)
getGenerics()
getClasses()
allClasses <- getClasses()
ext <- names(which(sapply(allClasses, function(x) extends(x,'envRefClass'))))
ext
allClasses <- getClasses()
ext <- names(which(sapply(allClasses, function(x) extends(x,'envRefClass'))))
ext
ext <- names(which(sapply(allClasses, function(x) extends(x,'envRefClass'))))
ext
ext
